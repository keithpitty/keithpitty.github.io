---
layout: post
title: Simple Design Distilled
date: 2014-08-08
permalink: /blog/archives/2014-08-08-simple-design-distilled
---
p. "Corey Haines":https://twitter.com/coreyhaines is well known for championing the intensive software practice events known as "coderetreat":http://coderetreat.org/. He shares his experiences from these sessions of the practice of simply designing software in the book "_Understanding the 4 Rules of Simple Design_":https://leanpub.com/4rulesofsimpledesign.

p. The four rules, originated by "Kent Beck":https://twitter.com/KentBeck in the late 90s, are expressed concisely by Corey as follows:

# Tests pass
# Expresses intent
# No duplication (DRY)
# Small

p. Corey has observed patterns that have emerged from solutions to "Conway's Game of Life":http://en.wikipedia.org/wiki/Conway's_Game_of_Life during many coderetreat sessions and he relates these back to the four rules.

p. Examples include the strategy of *reification* to eliminate knowledge duplication and noticing how the resultant classes act as *behavior attractors*. There are many more nuggets in Corey's book so, rather than listing them here, I encourage you to read the book.

p. Naturally, Corey is not the only software luminary, other than Kent Beck, to have written about the four rules of simple design. Indeed, Corey refers to two "fascinating":http://www.jbrains.ca/permalink/the-four-elements-of-simple-design "articles":http://blog.thecodewhisperer.com/2013/12/07/putting-an-age-old-battle-to-rest/ by "Joe Rainsberger":https://twitter.com/jbrains that have influenced his thinking.

p. I like the way Joe expands upon these rules in a practical sense and distills them to their essence. As Joe concludes, good simple design practice boils down to this:

bq. *Remove duplication and improve names in small cycles.*

p. That sounds like good advice to me.
